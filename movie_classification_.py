# -*- coding: utf-8 -*-
"""movie_classification_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SsT_L1NFZ0JSlSpAZdrYm0ue-75hewMz
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix


# Load the data
data = pd.read_csv('dim_reduced_dataset.csv')

# Plot the distribution of movie genres in the dataset
plt.figure(figsize=(10, 8))
sns.countplot(x="genre", data=data)
plt.title('Distribution of Movie Genres')
plt.show()

# Split the data into training and testing sets
train_data, test_data, train_labels, test_labels = train_test_split(data['review'], data['genre'], test_size=0.1, random_state=42)

# Use TfidfVectorizer to convert the reviews to numerical feature vectors
vectorizer = TfidfVectorizer(stop_words=['english','movie','film','story','this','year','life','brother','sister','His','her','fiction','true','man','woman','car'])
train_features = vectorizer.fit_transform(train_data)
test_features = vectorizer.transform(test_data)

# Train a KNN model on the training data
model = KNeighborsClassifier(n_neighbors=5)
model.fit(train_features, train_labels)

# Classify the test dataset
predicted_labels = model.predict(test_features)

# Display the classification results
for i in range(len(predicted_labels)):
    print("Review:", test_data.iloc[i])
    print("True genre:", test_labels.iloc[i])
    print("Predicted genre:", predicted_labels[i])
    print("------------------------")
  
accuracy = model.score(test_features, test_labels)
print("Test set accuracy:", accuracy)


# Generate confusion matrix
cm = confusion_matrix(test_labels, predicted_labels)

# Plot confusion matrix
plt.figure(figsize=(10,8))
sns.heatmap(cm, annot=True, cmap='Blues', fmt='g', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted Genre')
plt.ylabel('True Genre')
plt.title('Confusion Matrix')
plt.show()

# Generate classification report
from sklearn.metrics import classification_report
report = classification_report(test_labels, predicted_labels)
print(report)

